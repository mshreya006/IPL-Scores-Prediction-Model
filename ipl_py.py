# -*- coding: utf-8 -*-
"""IPL.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nwCM1BmbI_jy__nPDWkDcQ5p1zCzXs7p
"""

import streamlit as st
import pandas as pd
import pickle

# Load the trained model
def load_model():
    with open('pipe.pkl', 'rb') as file:
        model = pickle.load(file)
    return model

# Function to predict win probability using the trained model
def predict_win_probability(model, input_data):
    return model.predict_proba(input_data)

# Streamlit UI
def main():
    st.title('IPL Win Predictor')

    # Define the list of teams
    teams = ['Sunrisers Hyderabad', 'Mumbai Indians', 'Royal Challengers Bangalore', 'Kolkata Knight Riders', 'Kings XI Punjab', 'Chennai Super Kings', 'Rajasthan Royals', 'Delhi Capitals']

    city = ['Hyderabad', 'Bangalore', 'Mumbai', 'Indore', 'Kolkata', 'Delhi',
       'Chandigarh', 'Jaipur', 'Chennai', 'Cape Town', 'Port Elizabeth',
       'Durban', 'Centurion', 'East London', 'Johannesburg', 'Kimberley',
       'Bloemfontein', 'Ahmedabad', 'Cuttack', 'Nagpur', 'Dharamsala',
       'Visakhapatnam', 'Pune', 'Raipur', 'Ranchi', 'Abu Dhabi',
       'Sharjah', 'Mohali', 'Bengaluru']
    # Input fields
    batting_team = st.selectbox('Select the batting team', teams)
    bowling_team = st.selectbox('Select the bowling team', teams)
    City = st.selectbox('Select the field city',city)
    target = st.number_input('Target runs')
    overs = st.number_input('Overs completed')
    wickets = st.number_input('Wickets lost')
    current_score = st.number_input('Current score')
    crr = st.number_input('Current run rate')
    rrr = st.number_input('Required run rate')

    # Load the trained model
    model = load_model()

    # Predict button
    if st.button('Predict Probability'):
        runs_left = target - overs * 6
        balls_left = 120 - overs * 6
        wickets_left = 10 - wickets

        # Create input DataFrame
        input_df = pd.DataFrame({'batting_team': [batting_team],
                                 'bowling_team': [bowling_team],
                                 'city': [City],
                                 'runs_left': [runs_left],
                                 'balls_left': [balls_left],
                                 'wickets': [wickets_left],
                                 'total_runs_x': [target],
                                 'crr': [crr],
                                 'rrr': [rrr]})

        # Predict win probability using the trained model
        print("Input data shape:", input_df.shape)
        print("Input data columns:", input_df.columns)
        result = predict_win_probability(model, input_df)


        # Display prediction results
        st.header(f'{batting_team} - {result[0][0] * 100:.2f}%')
        st.header(f'{bowling_team} - {result[0][1] * 100:.2f}%')

if __name__ == "__main__":
    main()